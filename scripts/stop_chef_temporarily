#!/bin/bash

. stop_chef_lib

OVERRIDE_FILE=/var/chef/cron.default.override

[ $EUID -eq 0 ] || {
  echo "Ray, when someone asks you if you're a god, you say YES!"
  echo "(you must be root to do this)"
  exit 1
}

#
# These are functions other chef scripts may want to utilize
#


get_chefctl_procs() {
  out=$($PS | grep -v chefctl_solo | grep chefctl)
  if [ "$SKIP_SELF" -eq 1 ]; then
    pgid=$($PS | grep $$ | awk '{print $2}' | uniq)
    out=$(echo "$out" | grep -v "$pgid")
  fi
  echo "$out" | awk '{print $1}' | xargs
}

get_chefclient_procs() {
  opts=''
  if [ "$OS" = 'Darwin' ]; then
    opts='-f'
  fi
  pgrep $opts chef-client
}

stop_or_wait_for_chef() {
  [ "$1" = 'skip_self' ] && SKIP_SELF=1

  # Is Chef even running?
  [ -z "$(get_chefctl_procs)" ] && return 0

  if [ ! -e $CHEF_CURRENT_OUT ]; then
    return 0
  fi

  # If it is running ...
  # If there is only one line, then we are in the "sleep for $splay"
  # phase (the first line is printed by client.rb), so it's safe to kill it.
  # There's a VERY VERY slight race condition here in that we could look at the
  # file and then the splay ends and it starts, but it takes more than a second
  # for authentication and synchronization to happen, so even if that happens,
  # we will kill the run before it's done anything useful.

  # If "skip_self" flag is passed we take care to kill *other* chefctl runs
  # or properly wait for them to finish.

  lines=$(wc -l $CHEF_CURRENT_OUT | awk '{print $1}')
  procs=$(get_chefctl_procs)
  if [ "$lines" -lt 3 ] ; then
    if [ -n "$procs" ]; then
      kill $procs 2> /dev/null
      sleep 1
      kill $procs 2> /dev/null
      kill -9 $procs 2> /dev/null
    fi
    pkill chef-client 2> /dev/null
    sleep 1
    pkill -9 chef-client 2> /dev/null
  else
    num_chefctl_procs=$(echo "$procs" | wc -w)
    # Each chefctl instance can show up as 1-3 processes. So best case, we'll
    # only queue 5 runs. Worst case, we'll queue 15 runs.
    if [ "$num_chefctl_procs" -lt 15 ] ; then
      echo -n 'Waiting for other Chef runs to complete '
      while true; do
        [ -z "$(get_chefclient_procs)" ] && break
        echo -n '.'
        sleep 5
      done
      # chef-client is gone, kill any left waiting chefctls
      procs=$(get_chefctl_procs)
      if [ -n "$procs" ]; then
        kill $(get_chefctl_procs) >/dev/null 2>/dev/null
      fi
      echo ' done.'
    else
      echo 'Several Chef runs already queued. Not queueing any more.'
      exit 0
    fi
  fi
  return 0
}


help() {
  echo "
Usage: $0 [options]

Attempts to safely stop or wait for any active chef runs and then prevent
future runs for the time period specified (1 hour by default). We use the
override file built in to chefctl.sh ($OVERRIDE_FILE).

You can re-enable chef at any time by deleting $OVERRIDE_FILE

Options:
  -h
      Print help

  -r <reason>
      Provide a custom message explaining why you stopped chef.

  -t <hours>
      Stop for <hours> hours, default is 1 hour even if option is not
      specified.
"
}

stop() {
  hours=$1
  reason=$2

  # Try to let people know who did this
  msg="$(date) USER=$USER SUDO_USER=$SUDO_USER REASON=$reason"
  echo "$msg" >> $OVERRIDE_FILE

  # We remove the override when it is 1 hour old so actually touch the file
  # one less hour than requested. Also, macs don't use coreutils touch so
  # make it work.
  if [ $hours -eq 1 ]; then
    # Nice and easy
    touch $OVERRIDE_FILE
    stop_or_wait_for_chef
    echo 'Chef disabled for 1 hour.'
  else
    realhours=$(($hours-1))
    touch -d "now + $realhours hours" $OVERRIDE_FILE
    stop_or_wait_for_chef
    echo "Chef disabled for $hours hours."
  fi
}

# default
thours=1
reason='none'

while getopts 'hr:t:' opt; do
  case "$opt" in
    h)
      help
      exit 0
      ;;
    r)
      reason="$OPTARG"
      ;;
    t)
      thours="$OPTARG"
      ;;
    *)
      help
      exit 1
      ;;
  esac
done

if [ $thours -lt 1 ]; then
  echo "Invalid value: \"$thours\" hours is nonsensical, cowardly refusing"
  help
  exit 1
fi

stop "$thours" "$reason"
